{
	"info": {
		"_postman_id": "e39e8384-2750-4fe0-8df4-ceac626c1b3e",
		"name": "PaylocityChallenge",
		"description": "This collection consist of both Positive and Negative tests for Paylocity Benefits Dashboard API.\n\nAll the tests include relevant assertions.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31838975",
		"_collection_link": "https://www.postman.com/research-observer-88949110/workspace/paylocity-api-challenge/collection/31838975-e39e8384-2750-4fe0-8df4-ceac626c1b3e?action=share&source=collection_link&creator=31838975"
	},
	"item": [
		{
			"name": "Negative Security Tests",
			"item": [
				{
					"name": "Get Employee List Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});   \r",
									"\r",
									"//The request with 401 status code should have a response body\r",
									"pm.test(\"Verify if a response body is returned\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.not(null)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{Token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{Request_URL}}",
							"host": [
								"{{Request_URL}}"
							]
						}
					},
					"response": [
						{
							"name": "Get Employee List",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://wmxrwq14uc.execute-api.us-east-1.amazonaws.com/Prod/api/employees",
									"protocol": "https",
									"host": [
										"wmxrwq14uc",
										"execute-api",
										"us-east-1",
										"amazonaws",
										"com"
									],
									"path": [
										"Prod",
										"api",
										"employees"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "626"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Date",
									"value": "Mon, 03 Feb 2020 19:06:53 GMT"
								},
								{
									"key": "x-amzn-RequestId",
									"value": "e1b146c6-7a04-4a7b-96bd-380bb13d9a4e"
								},
								{
									"key": "x-amz-apigw-id",
									"value": "HVZUKE7XoAMF9zA="
								},
								{
									"key": "X-Amzn-Trace-Id",
									"value": "Root=1-5e386f4d-cac36a4413295f7df774bd58;Sampled=0"
								},
								{
									"key": "X-Cache",
									"value": "Miss from cloudfront"
								},
								{
									"key": "Via",
									"value": "1.1 7b891ba5ffaf08dd209adf67026190db.cloudfront.net (CloudFront)"
								},
								{
									"key": "X-Amz-Cf-Pop",
									"value": "ORD52-C1"
								},
								{
									"key": "X-Amz-Cf-Id",
									"value": "hSm_Jsqc_yaXsj2yELKp03K5oDWhSfeYrwgUh_hmlh0v1onUHQaqEQ=="
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"partitionKey\": \"TestUser1\",\n        \"sortKey\": \"15ab4884-e96c-4b4f-842c-6dd389033766\",\n        \"username\": \"TestUser1\",\n        \"id\": \"15ab4884-e96c-4b4f-842c-6dd389033766\",\n        \"firstName\": \"Steve\",\n        \"lastName\": \"Rogers\",\n        \"dependants\": 1,\n        \"expiration\": \"2020-02-23T17:41:07+00:00\",\n        \"salary\": 52000,\n        \"gross\": 2000,\n        \"benefitsCost\": 57.69231,\n        \"net\": 1942.30774\n    },\n    {\n        \"partitionKey\": \"TestUser1\",\n        \"sortKey\": \"ee4e35f4-bbe8-4905-afaa-48403c19c42e\",\n        \"username\": \"TestUser1\",\n        \"id\": \"ee4e35f4-bbe8-4905-afaa-48403c19c42e\",\n        \"firstName\": \"Tony\",\n        \"lastName\": \"Stark\",\n        \"dependants\": 2,\n        \"expiration\": \"2020-03-03T19:06:35+00:00\",\n        \"salary\": 52000,\n        \"gross\": 2000,\n        \"benefitsCost\": 76.92308,\n        \"net\": 1923.0769\n    }\n]"
						}
					]
				},
				{
					"name": "Get Employee List Unauthorized - Invalid PW",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});   \r",
									"\r",
									"//The request with 401 status code should have a response body\r",
									"pm.test(\"Verify if a response body is returned\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.not(null)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{InvalidPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{Username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{Token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{Request_URL}}",
							"host": [
								"{{Request_URL}}"
							]
						}
					},
					"response": [
						{
							"name": "Get Employee List",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://wmxrwq14uc.execute-api.us-east-1.amazonaws.com/Prod/api/employees",
									"protocol": "https",
									"host": [
										"wmxrwq14uc",
										"execute-api",
										"us-east-1",
										"amazonaws",
										"com"
									],
									"path": [
										"Prod",
										"api",
										"employees"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "626"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Date",
									"value": "Mon, 03 Feb 2020 19:06:53 GMT"
								},
								{
									"key": "x-amzn-RequestId",
									"value": "e1b146c6-7a04-4a7b-96bd-380bb13d9a4e"
								},
								{
									"key": "x-amz-apigw-id",
									"value": "HVZUKE7XoAMF9zA="
								},
								{
									"key": "X-Amzn-Trace-Id",
									"value": "Root=1-5e386f4d-cac36a4413295f7df774bd58;Sampled=0"
								},
								{
									"key": "X-Cache",
									"value": "Miss from cloudfront"
								},
								{
									"key": "Via",
									"value": "1.1 7b891ba5ffaf08dd209adf67026190db.cloudfront.net (CloudFront)"
								},
								{
									"key": "X-Amz-Cf-Pop",
									"value": "ORD52-C1"
								},
								{
									"key": "X-Amz-Cf-Id",
									"value": "hSm_Jsqc_yaXsj2yELKp03K5oDWhSfeYrwgUh_hmlh0v1onUHQaqEQ=="
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"partitionKey\": \"TestUser1\",\n        \"sortKey\": \"15ab4884-e96c-4b4f-842c-6dd389033766\",\n        \"username\": \"TestUser1\",\n        \"id\": \"15ab4884-e96c-4b4f-842c-6dd389033766\",\n        \"firstName\": \"Steve\",\n        \"lastName\": \"Rogers\",\n        \"dependants\": 1,\n        \"expiration\": \"2020-02-23T17:41:07+00:00\",\n        \"salary\": 52000,\n        \"gross\": 2000,\n        \"benefitsCost\": 57.69231,\n        \"net\": 1942.30774\n    },\n    {\n        \"partitionKey\": \"TestUser1\",\n        \"sortKey\": \"ee4e35f4-bbe8-4905-afaa-48403c19c42e\",\n        \"username\": \"TestUser1\",\n        \"id\": \"ee4e35f4-bbe8-4905-afaa-48403c19c42e\",\n        \"firstName\": \"Tony\",\n        \"lastName\": \"Stark\",\n        \"dependants\": 2,\n        \"expiration\": \"2020-03-03T19:06:35+00:00\",\n        \"salary\": 52000,\n        \"gross\": 2000,\n        \"benefitsCost\": 76.92308,\n        \"net\": 1923.0769\n    }\n]"
						}
					]
				},
				{
					"name": "Get Employee List - Invalid UN/User doesn't exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});   \r",
									"\r",
									"//The request with 404 status code should have a response body\r",
									"pm.test(\"Verify if a response body is returned\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.not(null)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "TestUser123",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{Password}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{Token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{Request_URL}}",
							"host": [
								"{{Request_URL}}"
							]
						}
					},
					"response": [
						{
							"name": "Get Employee List",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://wmxrwq14uc.execute-api.us-east-1.amazonaws.com/Prod/api/employees",
									"protocol": "https",
									"host": [
										"wmxrwq14uc",
										"execute-api",
										"us-east-1",
										"amazonaws",
										"com"
									],
									"path": [
										"Prod",
										"api",
										"employees"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "626"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Date",
									"value": "Mon, 03 Feb 2020 19:06:53 GMT"
								},
								{
									"key": "x-amzn-RequestId",
									"value": "e1b146c6-7a04-4a7b-96bd-380bb13d9a4e"
								},
								{
									"key": "x-amz-apigw-id",
									"value": "HVZUKE7XoAMF9zA="
								},
								{
									"key": "X-Amzn-Trace-Id",
									"value": "Root=1-5e386f4d-cac36a4413295f7df774bd58;Sampled=0"
								},
								{
									"key": "X-Cache",
									"value": "Miss from cloudfront"
								},
								{
									"key": "Via",
									"value": "1.1 7b891ba5ffaf08dd209adf67026190db.cloudfront.net (CloudFront)"
								},
								{
									"key": "X-Amz-Cf-Pop",
									"value": "ORD52-C1"
								},
								{
									"key": "X-Amz-Cf-Id",
									"value": "hSm_Jsqc_yaXsj2yELKp03K5oDWhSfeYrwgUh_hmlh0v1onUHQaqEQ=="
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"partitionKey\": \"TestUser1\",\n        \"sortKey\": \"15ab4884-e96c-4b4f-842c-6dd389033766\",\n        \"username\": \"TestUser1\",\n        \"id\": \"15ab4884-e96c-4b4f-842c-6dd389033766\",\n        \"firstName\": \"Steve\",\n        \"lastName\": \"Rogers\",\n        \"dependants\": 1,\n        \"expiration\": \"2020-02-23T17:41:07+00:00\",\n        \"salary\": 52000,\n        \"gross\": 2000,\n        \"benefitsCost\": 57.69231,\n        \"net\": 1942.30774\n    },\n    {\n        \"partitionKey\": \"TestUser1\",\n        \"sortKey\": \"ee4e35f4-bbe8-4905-afaa-48403c19c42e\",\n        \"username\": \"TestUser1\",\n        \"id\": \"ee4e35f4-bbe8-4905-afaa-48403c19c42e\",\n        \"firstName\": \"Tony\",\n        \"lastName\": \"Stark\",\n        \"dependants\": 2,\n        \"expiration\": \"2020-03-03T19:06:35+00:00\",\n        \"salary\": 52000,\n        \"gross\": 2000,\n        \"benefitsCost\": 76.92308,\n        \"net\": 1923.0769\n    }\n]"
						}
					]
				}
			],
			"description": "This folder consists of all the negative security tests for Paylocity Benefits Dashboard API."
		},
		{
			"name": "Happy Path Tests",
			"item": [
				{
					"name": "Get Employee List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify if the response is an array\", function () {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");  \r",
									" });\r",
									"\r",
									"\r",
									"pm.test(\"Verify that each employee returned has property salary\", function () {\r",
									"    jsonData.forEach((element) => {\r",
									"    pm.expect(element).to.have.property('salary')\r",
									"    })\r",
									"})\r",
									"\r",
									"const hasAtleastTwoDecimals = (number) => number * 100 /number === 1\r",
									"//Salary and gross should have atleast 2 decimal places.\r",
									"//In the UI they both have only 2 decimal places. So it should be uniform throughout\r",
									"pm.test(\"Salary should have 2 decimal places\", function () {   \r",
									"    jsonData.forEach((element) => {        \r",
									"    pm.expect(hasAtleastTwoDecimals(element.salary)).to.be.true\r",
									"})\r",
									"})\r",
									"\r",
									"pm.test(\"gross should have 2 decimal places\", function () {   \r",
									"    jsonData.forEach((element) => {        \r",
									"    pm.expect(hasAtleastTwoDecimals(element.gross)).to.be.true\r",
									"})\r",
									"})\r",
									"\r",
									"const hasAtMostTwoDecimals = (number) => number * 100 % 1 === 0  \r",
									"//Benefits Cost and Net Pay should not have more than 2 decimal places.\r",
									"//In the UI they both have only 2 decimal places. So it should be uniform throughout\r",
									"pm.test(\"Benefits Cost should have 2 decimal places\", function () {   \r",
									"    jsonData.forEach((element) => {        \r",
									"    pm.expect(hasAtMostTwoDecimals(element.benefitsCost)).to.be.true\r",
									"})\r",
									"})\r",
									"\r",
									"pm.test(\"Net Pay should have 2 decimal places\", function () {   \r",
									"    jsonData.forEach((element) => {        \r",
									"    pm.expect(hasAtMostTwoDecimals(element.net)).to.be.true\r",
									"})\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{Token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{Request_URL}}",
							"host": [
								"{{Request_URL}}"
							]
						}
					},
					"response": [
						{
							"name": "Get Employee List",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://wmxrwq14uc.execute-api.us-east-1.amazonaws.com/Prod/api/employees",
									"protocol": "https",
									"host": [
										"wmxrwq14uc",
										"execute-api",
										"us-east-1",
										"amazonaws",
										"com"
									],
									"path": [
										"Prod",
										"api",
										"employees"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "626"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Date",
									"value": "Mon, 03 Feb 2020 19:06:53 GMT"
								},
								{
									"key": "x-amzn-RequestId",
									"value": "e1b146c6-7a04-4a7b-96bd-380bb13d9a4e"
								},
								{
									"key": "x-amz-apigw-id",
									"value": "HVZUKE7XoAMF9zA="
								},
								{
									"key": "X-Amzn-Trace-Id",
									"value": "Root=1-5e386f4d-cac36a4413295f7df774bd58;Sampled=0"
								},
								{
									"key": "X-Cache",
									"value": "Miss from cloudfront"
								},
								{
									"key": "Via",
									"value": "1.1 7b891ba5ffaf08dd209adf67026190db.cloudfront.net (CloudFront)"
								},
								{
									"key": "X-Amz-Cf-Pop",
									"value": "ORD52-C1"
								},
								{
									"key": "X-Amz-Cf-Id",
									"value": "hSm_Jsqc_yaXsj2yELKp03K5oDWhSfeYrwgUh_hmlh0v1onUHQaqEQ=="
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"partitionKey\": \"TestUser1\",\n        \"sortKey\": \"15ab4884-e96c-4b4f-842c-6dd389033766\",\n        \"username\": \"TestUser1\",\n        \"id\": \"15ab4884-e96c-4b4f-842c-6dd389033766\",\n        \"firstName\": \"Steve\",\n        \"lastName\": \"Rogers\",\n        \"dependants\": 1,\n        \"expiration\": \"2020-02-23T17:41:07+00:00\",\n        \"salary\": 52000,\n        \"gross\": 2000,\n        \"benefitsCost\": 57.69231,\n        \"net\": 1942.30774\n    },\n    {\n        \"partitionKey\": \"TestUser1\",\n        \"sortKey\": \"ee4e35f4-bbe8-4905-afaa-48403c19c42e\",\n        \"username\": \"TestUser1\",\n        \"id\": \"ee4e35f4-bbe8-4905-afaa-48403c19c42e\",\n        \"firstName\": \"Tony\",\n        \"lastName\": \"Stark\",\n        \"dependants\": 2,\n        \"expiration\": \"2020-03-03T19:06:35+00:00\",\n        \"salary\": 52000,\n        \"gross\": 2000,\n        \"benefitsCost\": 76.92308,\n        \"net\": 1923.0769\n    }\n]"
						}
					]
				},
				{
					"name": "Add Employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"let jsonReq = JSON.parse(pm.request.body.raw)",
									"",
									"pm.environment.set(\"id\", jsonData.id);",
									"",
									"pm.test(\"Verify that the FIRSTNAME in the response is same as the one provided in the body\", function () {",
									"    pm.expect(jsonData.firstName).to.eql(jsonReq.firstName);",
									"});",
									"",
									"pm.test(\"Verify that the LASTNAME in the response is same as the one provided in the body\", function () {",
									"    pm.expect(jsonData.lastName).to.eql(jsonReq.lastName);",
									"});",
									"",
									"pm.test(\"Verify if the value of DEPENDANTS in the response is same as the value provided in the body\", function () {",
									"    pm.expect(jsonData.dependants).to.eql(jsonReq.dependants);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic {{Token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"Wonder\",\n    \"lastName\": \"Woman\",\n    \"dependants\": 3\n}"
						},
						"url": {
							"raw": "{{Request_URL}}",
							"host": [
								"{{Request_URL}}"
							]
						}
					},
					"response": [
						{
							"name": "Add Employee",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{token}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"Natasha\",\n    \"lastName\": \"Romanoff\",\n    \"dependants\": 3\n}"
								},
								"url": {
									"raw": "https://wmxrwq14uc.execute-api.us-east-1.amazonaws.com/Prod/api/employees",
									"protocol": "https",
									"host": [
										"wmxrwq14uc",
										"execute-api",
										"us-east-1",
										"amazonaws",
										"com"
									],
									"path": [
										"Prod",
										"api",
										"employees"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "278"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Date",
									"value": "Mon, 03 Feb 2020 19:09:21 GMT"
								},
								{
									"key": "x-amzn-RequestId",
									"value": "3396c97b-999d-4f05-9a05-e703570f753e"
								},
								{
									"key": "x-amz-apigw-id",
									"value": "HVZrMGHHoAMFygA="
								},
								{
									"key": "X-Amzn-Trace-Id",
									"value": "Root=1-5e386fe1-6e06a18a49d85a67160a88a7;Sampled=0"
								},
								{
									"key": "X-Cache",
									"value": "Miss from cloudfront"
								},
								{
									"key": "Via",
									"value": "1.1 7b891ba5ffaf08dd209adf67026190db.cloudfront.net (CloudFront)"
								},
								{
									"key": "X-Amz-Cf-Pop",
									"value": "ORD52-C1"
								},
								{
									"key": "X-Amz-Cf-Id",
									"value": "nFIi5rL0BsEjX8yNyOIIgOTSBrAoosGndMNagg_yN3RMBGx-TQYmVA=="
								}
							],
							"cookie": [],
							"body": "{\n    \"partitionKey\": \"TestUser1\",\n    \"sortKey\": \"1945d706-39f3-49eb-bea8-98abcf766e5e\",\n    \"username\": \"TestUser1\",\n    \"id\": \"1945d706-39f3-49eb-bea8-98abcf766e5e\",\n    \"firstName\": \"Natasha\",\n    \"lastName\": \"Romanoff\",\n    \"dependants\": 3,\n    \"salary\": 52000,\n    \"gross\": 2000,\n    \"benefitsCost\": 96.1538544,\n    \"net\": 1903.84619\n}"
						}
					]
				},
				{
					"name": "Get Employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify if the response is an object\", function () {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");     \r",
									" });\r",
									"\r",
									"pm.test(\"Verify if the value of id in the response is same as the environment variable 'id' value\", function () {    \r",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"id\"));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{Token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{Request_URL}}/{{id}}",
							"host": [
								"{{Request_URL}}"
							],
							"path": [
								"{{id}}"
							]
						}
					},
					"response": [
						{
							"name": "Get Employee",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Basic {{token}}"
									}
								],
								"url": {
									"raw": "https://wmxrwq14uc.execute-api.us-east-1.amazonaws.com/Prod/api/employees/{{id}}",
									"protocol": "https",
									"host": [
										"wmxrwq14uc",
										"execute-api",
										"us-east-1",
										"amazonaws",
										"com"
									],
									"path": [
										"Prod",
										"api",
										"employees",
										"{{id}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "319"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Date",
									"value": "Mon, 03 Feb 2020 19:10:22 GMT"
								},
								{
									"key": "x-amzn-RequestId",
									"value": "bf18fb76-80d3-4528-a665-5043bf59f85f"
								},
								{
									"key": "x-amz-apigw-id",
									"value": "HVZ0tHDPoAMFXnA="
								},
								{
									"key": "X-Amzn-Trace-Id",
									"value": "Root=1-5e38701e-9141e79093a7e70db2994c31;Sampled=0"
								},
								{
									"key": "X-Cache",
									"value": "Miss from cloudfront"
								},
								{
									"key": "Via",
									"value": "1.1 7b891ba5ffaf08dd209adf67026190db.cloudfront.net (CloudFront)"
								},
								{
									"key": "X-Amz-Cf-Pop",
									"value": "ORD52-C1"
								},
								{
									"key": "X-Amz-Cf-Id",
									"value": "lrYWY_SO_d8jw6OeCucWpEiCGR4Mwb9BCRHlXXw-9fcWfxq4nvk39Q=="
								}
							],
							"cookie": [],
							"body": "{\n    \"partitionKey\": \"TestUser1\",\n    \"sortKey\": \"1945d706-39f3-49eb-bea8-98abcf766e5e\",\n    \"username\": \"TestUser1\",\n    \"id\": \"1945d706-39f3-49eb-bea8-98abcf766e5e\",\n    \"firstName\": \"Natasha\",\n    \"lastName\": \"Romanoff\",\n    \"dependants\": 3,\n    \"expiration\": \"2020-03-03T19:09:21+00:00\",\n    \"salary\": 52000,\n    \"gross\": 2000,\n    \"benefitsCost\": 96.1538544,\n    \"net\": 1903.84619\n}"
						}
					]
				},
				{
					"name": "Update Employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"let jsonReq = JSON.parse(pm.request.body.raw)\r",
									"\r",
									"pm.test(\"Verify that the FIRSTNAME in the response is same as the one provided in the body\", function () {\r",
									"    pm.expect(jsonData.firstName).to.eql(jsonReq.firstName);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the LASTNAME in the response is same as the one provided in the body\", function () {\r",
									"    pm.expect(jsonData.lastName).to.eql(jsonReq.lastName);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the value of DEPENDANTS in the response is same as the value provided in the body\", function () {\r",
									"    pm.expect(jsonData.dependants).to.eql(jsonReq.dependants);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic {{Token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{id}}\",\r\n    \"firstName\": \"Wonder PUT\",\r\n    \"lastName\": \"Woman PUT\",\r\n    \"dependants\": 2\r\n}"
						},
						"url": {
							"raw": "{{Request_URL}}",
							"host": [
								"{{Request_URL}}"
							]
						}
					},
					"response": [
						{
							"name": "Update Employee",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"1945d706-39f3-49eb-bea8-98abcf766e5e\",\r\n    \"firstName\": \"Wanda\",\r\n    \"lastName\": \"Maximoff\",\r\n    \"dependants\": 2\r\n}"
								},
								"url": {
									"raw": "https://wmxrwq14uc.execute-api.us-east-1.amazonaws.com/Prod/api/employees",
									"protocol": "https",
									"host": [
										"wmxrwq14uc",
										"execute-api",
										"us-east-1",
										"amazonaws",
										"com"
									],
									"path": [
										"Prod",
										"api",
										"employees"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "273"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Date",
									"value": "Mon, 03 Feb 2020 19:12:29 GMT"
								},
								{
									"key": "x-amzn-RequestId",
									"value": "b3f07a0a-aba4-48e4-9855-2b6fc99920e3"
								},
								{
									"key": "x-amz-apigw-id",
									"value": "HVaIhGR9IAMFZgw="
								},
								{
									"key": "X-Amzn-Trace-Id",
									"value": "Root=1-5e38709c-30cd94066950169ffcb7b740;Sampled=0"
								},
								{
									"key": "X-Cache",
									"value": "Miss from cloudfront"
								},
								{
									"key": "Via",
									"value": "1.1 7b891ba5ffaf08dd209adf67026190db.cloudfront.net (CloudFront)"
								},
								{
									"key": "X-Amz-Cf-Pop",
									"value": "ORD52-C1"
								},
								{
									"key": "X-Amz-Cf-Id",
									"value": "aFTv25JDJ9ReKZpm8rSalwgyZ3wvDFHd39pTnfc_isJNtJ9H4qXnXw=="
								}
							],
							"cookie": [],
							"body": "{\n    \"partitionKey\": \"TestUser1\",\n    \"sortKey\": \"1945d706-39f3-49eb-bea8-98abcf766e5e\",\n    \"username\": \"TestUser1\",\n    \"id\": \"1945d706-39f3-49eb-bea8-98abcf766e5e\",\n    \"firstName\": \"Wanda\",\n    \"lastName\": \"Maximoff\",\n    \"dependants\": 2,\n    \"salary\": 52000,\n    \"gross\": 2000,\n    \"benefitsCost\": 76.92308,\n    \"net\": 1923.0769\n}"
						}
					]
				},
				{
					"name": "Delete Employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//The delete request should have a response body\r",
									"pm.test(\"Verify if a response body is returned\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.not(null)\r",
									"})      "
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{Username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{Password}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{Token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{Request_URL}}/{{id}}",
							"host": [
								"{{Request_URL}}"
							],
							"path": [
								"{{id}}"
							]
						}
					},
					"response": [
						{
							"name": "Delete Employee",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://wmxrwq14uc.execute-api.us-east-1.amazonaws.com/Prod/api/employees/{{id}}",
									"protocol": "https",
									"host": [
										"wmxrwq14uc",
										"execute-api",
										"us-east-1",
										"amazonaws",
										"com"
									],
									"path": [
										"Prod",
										"api",
										"employees",
										"{{id}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Content-Length",
									"value": "0"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Date",
									"value": "Mon, 03 Feb 2020 19:13:30 GMT"
								},
								{
									"key": "x-amzn-RequestId",
									"value": "9bc8a4a9-6860-4fea-8d16-e49c291b1d86"
								},
								{
									"key": "x-amz-apigw-id",
									"value": "HVaSIHvFIAMFkCg="
								},
								{
									"key": "X-Amzn-Trace-Id",
									"value": "Root=1-5e3870da-ab5c33d01cc1ff705e9da8a0;Sampled=0"
								},
								{
									"key": "X-Cache",
									"value": "Miss from cloudfront"
								},
								{
									"key": "Via",
									"value": "1.1 7b891ba5ffaf08dd209adf67026190db.cloudfront.net (CloudFront)"
								},
								{
									"key": "X-Amz-Cf-Pop",
									"value": "ORD52-C1"
								},
								{
									"key": "X-Amz-Cf-Id",
									"value": "pr-VjFpfZKGE1FX_OZ9wEbNuPjPBwCOk1AZqg4X54cI-b_Q2MtGVVA=="
								}
							],
							"cookie": [],
							"body": "    "
						}
					]
				}
			],
			"description": "This folder consists of all the Happy Path tests for Paylocity Benefits Dashboard API.",
			"auth": {
				"type": "basic",
				"basic": [
					{
						"key": "password",
						"value": "{{Password}}",
						"type": "string"
					},
					{
						"key": "username",
						"value": "{{Username}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"if(pm.info.requestName != \"Delete Employee\"){\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"}"
						]
					}
				}
			]
		},
		{
			"name": "Negative Tests_PUT & GET",
			"item": [
				{
					"name": "Update Employee Without id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//The PUT request should return '400 Bad Request' response code if id is not provided\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"//Response should have relevant error message\r",
									"pm.test(\"Verify that the response body exists\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.exist\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{Username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{Password}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic {{Token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"\",\r\n    \"firstName\": \"Wonder\",\r\n    \"lastName\": \"Woman\",\r\n    \"dependants\": 2\r\n}"
						},
						"url": {
							"raw": "{{Request_URL}}",
							"host": [
								"{{Request_URL}}"
							]
						}
					},
					"response": [
						{
							"name": "Update Employee",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"1945d706-39f3-49eb-bea8-98abcf766e5e\",\r\n    \"firstName\": \"Wanda\",\r\n    \"lastName\": \"Maximoff\",\r\n    \"dependants\": 2\r\n}"
								},
								"url": {
									"raw": "https://wmxrwq14uc.execute-api.us-east-1.amazonaws.com/Prod/api/employees",
									"protocol": "https",
									"host": [
										"wmxrwq14uc",
										"execute-api",
										"us-east-1",
										"amazonaws",
										"com"
									],
									"path": [
										"Prod",
										"api",
										"employees"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "273"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Date",
									"value": "Mon, 03 Feb 2020 19:12:29 GMT"
								},
								{
									"key": "x-amzn-RequestId",
									"value": "b3f07a0a-aba4-48e4-9855-2b6fc99920e3"
								},
								{
									"key": "x-amz-apigw-id",
									"value": "HVaIhGR9IAMFZgw="
								},
								{
									"key": "X-Amzn-Trace-Id",
									"value": "Root=1-5e38709c-30cd94066950169ffcb7b740;Sampled=0"
								},
								{
									"key": "X-Cache",
									"value": "Miss from cloudfront"
								},
								{
									"key": "Via",
									"value": "1.1 7b891ba5ffaf08dd209adf67026190db.cloudfront.net (CloudFront)"
								},
								{
									"key": "X-Amz-Cf-Pop",
									"value": "ORD52-C1"
								},
								{
									"key": "X-Amz-Cf-Id",
									"value": "aFTv25JDJ9ReKZpm8rSalwgyZ3wvDFHd39pTnfc_isJNtJ9H4qXnXw=="
								}
							],
							"cookie": [],
							"body": "{\n    \"partitionKey\": \"TestUser1\",\n    \"sortKey\": \"1945d706-39f3-49eb-bea8-98abcf766e5e\",\n    \"username\": \"TestUser1\",\n    \"id\": \"1945d706-39f3-49eb-bea8-98abcf766e5e\",\n    \"firstName\": \"Wanda\",\n    \"lastName\": \"Maximoff\",\n    \"dependants\": 2,\n    \"salary\": 52000,\n    \"gross\": 2000,\n    \"benefitsCost\": 76.92308,\n    \"net\": 1923.0769\n}"
						}
					]
				},
				{
					"name": "Get Employee With Invalid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//The Get Request should return '404 Not Found' Response code if invalid id is provided\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"//Response should have relevant error message\r",
									"pm.test(\"Verify that the response body exists\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.exist\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{Password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{Username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{Token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{Request_URL}}/abckdefghijkl-abcdefgh-blablabla",
							"host": [
								"{{Request_URL}}"
							],
							"path": [
								"abckdefghijkl-abcdefgh-blablabla"
							]
						}
					},
					"response": [
						{
							"name": "Get Employee",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Basic {{token}}"
									}
								],
								"url": {
									"raw": "https://wmxrwq14uc.execute-api.us-east-1.amazonaws.com/Prod/api/employees/{{id}}",
									"protocol": "https",
									"host": [
										"wmxrwq14uc",
										"execute-api",
										"us-east-1",
										"amazonaws",
										"com"
									],
									"path": [
										"Prod",
										"api",
										"employees",
										"{{id}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "319"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Date",
									"value": "Mon, 03 Feb 2020 19:10:22 GMT"
								},
								{
									"key": "x-amzn-RequestId",
									"value": "bf18fb76-80d3-4528-a665-5043bf59f85f"
								},
								{
									"key": "x-amz-apigw-id",
									"value": "HVZ0tHDPoAMFXnA="
								},
								{
									"key": "X-Amzn-Trace-Id",
									"value": "Root=1-5e38701e-9141e79093a7e70db2994c31;Sampled=0"
								},
								{
									"key": "X-Cache",
									"value": "Miss from cloudfront"
								},
								{
									"key": "Via",
									"value": "1.1 7b891ba5ffaf08dd209adf67026190db.cloudfront.net (CloudFront)"
								},
								{
									"key": "X-Amz-Cf-Pop",
									"value": "ORD52-C1"
								},
								{
									"key": "X-Amz-Cf-Id",
									"value": "lrYWY_SO_d8jw6OeCucWpEiCGR4Mwb9BCRHlXXw-9fcWfxq4nvk39Q=="
								}
							],
							"cookie": [],
							"body": "{\n    \"partitionKey\": \"TestUser1\",\n    \"sortKey\": \"1945d706-39f3-49eb-bea8-98abcf766e5e\",\n    \"username\": \"TestUser1\",\n    \"id\": \"1945d706-39f3-49eb-bea8-98abcf766e5e\",\n    \"firstName\": \"Natasha\",\n    \"lastName\": \"Romanoff\",\n    \"dependants\": 3,\n    \"expiration\": \"2020-03-03T19:09:21+00:00\",\n    \"salary\": 52000,\n    \"gross\": 2000,\n    \"benefitsCost\": 96.1538544,\n    \"net\": 1903.84619\n}"
						}
					]
				}
			],
			"description": "This folder consists of a PUT request without the id in the request body and a GET request with invalid id. These requests are asserting on status code and response body."
		},
		{
			"name": "Delete - Looping Request",
			"item": [
				{
					"name": "Delete Employee - Loop Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//The delete request should have a response body\r",
									"pm.test(\"Verify if a response body is returned\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.not(null)\r",
									"})\r",
									"\r",
									"//The same employee(with same id) should not be deleted multiple times. \r",
									"//If the same employee is tried to delete the next time, it should give a '404 Not Found' status code\r",
									"for(i = 1 ; i <= 3 ; i++){\r",
									"    postman.setNextRequest(\"Delete Employee\")\r",
									"    if(i == 1){\r",
									"      pm.test(\"Status code is 200\", function () {\r",
									"         pm.response.to.have.status(200);\r",
									"         });\r",
									"    }\r",
									"    else{\r",
									"     pm.test(\"Status code is 404\", function () {\r",
									"     pm.response.to.have.status(404);\r",
									"    });\r",
									"    }\r",
									"}\r",
									"\r",
									"postman.setNextRequest(null)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{Username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{Password}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{Token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{Request_URL}}/{{id}}",
							"host": [
								"{{Request_URL}}"
							],
							"path": [
								"{{id}}"
							]
						}
					},
					"response": [
						{
							"name": "Delete Employee",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://wmxrwq14uc.execute-api.us-east-1.amazonaws.com/Prod/api/employees/{{id}}",
									"protocol": "https",
									"host": [
										"wmxrwq14uc",
										"execute-api",
										"us-east-1",
										"amazonaws",
										"com"
									],
									"path": [
										"Prod",
										"api",
										"employees",
										"{{id}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Content-Length",
									"value": "0"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Date",
									"value": "Mon, 03 Feb 2020 19:13:30 GMT"
								},
								{
									"key": "x-amzn-RequestId",
									"value": "9bc8a4a9-6860-4fea-8d16-e49c291b1d86"
								},
								{
									"key": "x-amz-apigw-id",
									"value": "HVaSIHvFIAMFkCg="
								},
								{
									"key": "X-Amzn-Trace-Id",
									"value": "Root=1-5e3870da-ab5c33d01cc1ff705e9da8a0;Sampled=0"
								},
								{
									"key": "X-Cache",
									"value": "Miss from cloudfront"
								},
								{
									"key": "Via",
									"value": "1.1 7b891ba5ffaf08dd209adf67026190db.cloudfront.net (CloudFront)"
								},
								{
									"key": "X-Amz-Cf-Pop",
									"value": "ORD52-C1"
								},
								{
									"key": "X-Amz-Cf-Id",
									"value": "pr-VjFpfZKGE1FX_OZ9wEbNuPjPBwCOk1AZqg4X54cI-b_Q2MtGVVA=="
								}
							],
							"cookie": [],
							"body": "    "
						}
					]
				}
			],
			"description": "The folder has a Delete request which runs for 3 times, trying to delete the emploee with same id. Here we are asserting on the response code for each run."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}